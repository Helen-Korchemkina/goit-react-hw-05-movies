{"version":3,"file":"static/js/184.4e5f68b2.chunk.js","mappings":"uKAiBA,IAdmB,SAAC,GAAe,IAAbA,EAAY,EAAZA,MACXC,GAAWC,EAAAA,EAAAA,MAElB,OACM,wBACDF,GAASA,EAAMG,KAAI,SAAAC,GAAI,OACtB,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAACC,KAAMP,GAA9C,SAA0DG,EAAKK,SADxDL,EAAKE,W,2CCExB,IATe,WACP,OAAO,SAAC,KAAD,CACXI,OAAO,MACPC,MAAM,MACNC,MAAM,OACNC,UAAU,c,+HCuCd,UAxCmB,WACjB,OAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAAwCC,EAAAA,EAAAA,IAAgB,IAAxD,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAaF,EAAaG,IAAI,SAwBpC,OAjBAC,EAAAA,EAAAA,YAAU,WACR,GAAIF,EAAY,CACd,IAAMG,EAAa,mCAAG,2FACpBP,GAAW,GADS,kBAGQQ,EAAAA,EAAAA,qBAAyBJ,GAHjC,OAGZK,EAHY,OAIlBX,EAAeW,GAJG,gDAMlBC,QAAQC,IAAR,MANkB,yBAQlBX,GAAW,GARO,4EAAH,qDAWnBO,OAED,CAACH,KAGF,6BACE,kBAAMQ,SAxBW,SAAAC,GACnBA,EAAMC,iBACNX,EAAgB,CAACY,MAAOF,EAAMG,OAAOC,SAASF,MAAMG,MAAMC,iBAsBxD,WACE,kBAAOC,KAAK,OAAOC,KAAK,QAAQC,WAAS,KACzC,mBAAQF,KAAK,SAAb,uBAECrB,IAAW,SAAC,IAAD,IACXF,IAAe,SAAC,IAAD,CAAYf,MAAOe,S,yECvC3C0B,IAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAGVC,EAAa,mCAAG,oGACGF,IAAAA,IAAA,qCAAwCC,IAD3C,cACdE,EADc,yBAEbA,EAASC,KAAKC,SAFD,2CAAH,qDAKbC,EAAoB,mCAAG,WAAOC,GAAP,uFACNP,IAAAA,IAAA,+BAAkCC,EAAlC,4DAA6FM,IADvF,cACvBJ,EADuB,yBAEtBA,EAASC,KAAKC,SAFQ,2CAAH,sDAKpBG,EAAiB,mCAAG,WAAOC,GAAP,uFACHT,IAAAA,IAAA,gBAAmBS,EAAnB,oBAAsCR,EAAtC,oBADG,cACpBE,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,sDAKjBM,EAAW,mCAAG,WAAOD,GAAP,uFACGT,IAAAA,IAAA,gBAAmBS,EAAnB,4BAA8CR,EAA9C,oBADH,cACdE,EADc,yBAEbA,EAASC,KAAKO,MAFD,2CAAH,sDAKXC,EAAY,mCAAG,WAAOH,GAAP,uFACET,IAAAA,IAAA,gBAAmBS,EAAnB,4BAA8CR,EAA9C,2BADF,cACfE,EADe,yBAEdA,EAASC,KAAKC,SAFA,2CAAH,sDAKZpB,EAAM,CACRiB,cAAAA,EACAI,qBAAAA,EACAE,kBAAAA,EACAE,YAAAA,EACAE,aAAAA,GAGJ","sources":["components/EditorList/EditorList.jsx","components/Loader/Loader.jsx","components/MoviesPage/MoviesPage.jsx","services/api.js"],"sourcesContent":["import { Link, useLocation } from \"react-router-dom\";\n\n\nconst EditorList = ({ films }) => {\n     const location = useLocation();\n\n    return (\n          <ul>\n        {films && films.map(film => (\n          <li key={film.id}>\n            <Link to={`/movies/${film.id}`} state={{from: location}}>{film.title}</Link>\n          </li>\n        ))}\n        </ul>\n)\n}\n\nexport default EditorList;","import { ThreeDots } from 'react-loader-spinner';\n\nconst Loader = () => {\n        return <ThreeDots\n    height=\"100\"\n    width=\"100\"\n    color='grey'\n    ariaLabel='loading'\n  />\n}\n    \nexport default Loader;","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport api from '../../services/api';\nimport Loader from 'components/Loader/Loader';\nimport EditorList from '../EditorList/EditorList';\n\nconst MoviesPage = () => {\n  const [searchFilms, setSearchFilms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams({});\n  const queryMovie = searchParams.get(\"query\");\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setSearchParams({query: event.target.elements.query.value.toLowerCase()});\n  }\n\n  useEffect(() => {\n    if (queryMovie) {\n      const onSearchMovie = async () => {\n        setLoading(true);\n        try {\n          const searchMovie = await api.fetchSearchByKeyword(queryMovie);\n          setSearchFilms(searchMovie);\n        } catch (error) {\n          console.log(error);\n        } finally {\n          setLoading(false);\n        }\n      };\n      onSearchMovie();\n    }\n  }, [queryMovie]);\n\n  return (\n    <main>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"query\" autoFocus />\n        <button type=\"submit\">Search</button>\n      </form>\n        {loading && <Loader />}\n        {searchFilms && <EditorList films={searchFilms} />}\n    </main>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '9af9995e042723d75d96d38fad102c15';\n\n\nconst fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\nconst fetchSearchByKeyword = async (keyword) => {\nconst response = await axios.get(`search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`);\nreturn response.data.results;    \n}\n\nconst fetchMovieDetalis = async (movieId) => {\nconst response = await axios.get(`movie/${movieId}?api_key=${API_KEY}&language=en-US`);\nreturn response.data;     \n}\n\nconst fetchActors = async (movieId) => {\nconst response = await axios.get(`movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`);\nreturn response.data.cast;     \n}\n\nconst fetchReviews = async (movieId) => {\nconst response = await axios.get(`movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\nreturn response.data.results;     \n}\n\nconst api = {\n    fetchTrending,\n    fetchSearchByKeyword,\n    fetchMovieDetalis,\n    fetchActors,\n    fetchReviews,\n};\n\nexport default api;\n\n\n"],"names":["films","location","useLocation","map","film","to","id","state","from","title","height","width","color","ariaLabel","useState","searchFilms","setSearchFilms","loading","setLoading","useSearchParams","searchParams","setSearchParams","queryMovie","get","useEffect","onSearchMovie","api","searchMovie","console","log","onSubmit","event","preventDefault","query","target","elements","value","toLowerCase","type","name","autoFocus","axios","API_KEY","fetchTrending","response","data","results","fetchSearchByKeyword","keyword","fetchMovieDetalis","movieId","fetchActors","cast","fetchReviews"],"sourceRoot":""}