{"version":3,"file":"static/js/440.0d6e458a.chunk.js","mappings":"6JAWA,IATe,WACP,OAAO,SAAC,KAAD,CACXA,OAAO,MACPC,MAAM,MACNC,MAAM,OACNC,UAAU,c,qKCNd,EAA+B,uCAA/B,EAAkF,oC,SCuElF,EAjEyB,WAAO,IAAD,IACrBC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACMC,GAAWC,EAAAA,EAAAA,MAiBjB,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,2FACrBJ,GAAW,GADU,kBAGOK,EAAAA,EAAAA,kBAAsBX,GAH7B,OAGbY,EAHa,OAInBR,EAAaQ,GAJM,gDAMnBC,QAAQC,IAAR,MANmB,yBAQnBR,GAAW,GARQ,4EAAH,qDAWpBI,MACC,CAACV,KAGF,iCACE,SAAC,KAAD,CAAMe,GAAE,iBAAER,QAAF,IAAEA,GAAF,UAAEA,EAAUS,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,UAAnC,UAA8C,oBAAQC,KAAK,SAAb,WAAsB,SAAC,MAAD,IAAtB,gBAC5Cb,IAAW,SAACc,EAAA,EAAD,IACZhB,IACC,iBAAKiB,UAAWC,EAAhB,WACE,gBAAKxB,MAAM,QACTyB,IAAK,kCAAoCnB,EAAUoB,YACnDC,IAAKrB,EAAUsB,kBAEjB,4BACE,0BACGtB,EAAUuB,MADb,KACsBvB,EAAUwB,aAAaC,MAAM,EAAG,GADtD,QAGA,wCAAgBzB,EAAU0B,eAC1B,sCACA,uBAAI1B,EAAU2B,YACd,oCACA,eAAIV,UAAWC,EAAf,SACGlB,EAAU4B,OAAOC,KAAI,SAAAC,GAAK,OACzB,wBAAoBA,EAAMC,MAAjBD,EAAME,gBAMvB,mBACF,4BACE,oDACA,2BACE,yBACE,SAAC,KAAD,CAAMpB,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAGF,mBACF,SAAC,KAAD,Y,yEChERqB,IAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAGVC,EAAa,mCAAG,oGACGF,IAAAA,IAAA,qCAAwCC,IAD3C,cACdE,EADc,yBAEbA,EAASC,KAAKC,SAFD,2CAAH,qDAKbC,EAAoB,mCAAG,WAAOC,GAAP,uFACNP,IAAAA,IAAA,+BAAkCC,EAAlC,4DAA6FM,IADvF,cACvBJ,EADuB,yBAEtBA,EAASC,KAAKC,SAFQ,2CAAH,sDAKpBG,EAAiB,mCAAG,WAAO5C,GAAP,uFACHoC,IAAAA,IAAA,gBAAmBpC,EAAnB,oBAAsCqC,EAAtC,oBADG,cACpBE,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,sDAKjBK,EAAW,mCAAG,WAAO7C,GAAP,uFACGoC,IAAAA,IAAA,gBAAmBpC,EAAnB,4BAA8CqC,EAA9C,oBADH,cACdE,EADc,yBAEbA,EAASC,KAAKM,MAFD,2CAAH,sDAKXC,EAAY,mCAAG,WAAO/C,GAAP,uFACEoC,IAAAA,IAAA,gBAAmBpC,EAAnB,4BAA8CqC,EAA9C,2BADF,cACfE,EADe,yBAEdA,EAASC,KAAKC,SAFA,2CAAH,sDAKZ9B,EAAM,CACR2B,cAAAA,EACAI,qBAAAA,EACAE,kBAAAA,EACAC,YAAAA,EACAE,aAAAA,GAGJ","sources":["components/Loader/Loader.jsx","webpack://goit-react-hw-05-movies/./src/components/MovieDetailsPage/MovieDetailsPage.module.css?377f","components/MovieDetailsPage/MovieDetailsPage.jsx","services/api.js"],"sourcesContent":["import { ThreeDots } from 'react-loader-spinner';\n\nconst Loader = () => {\n        return <ThreeDots\n    height=\"100\"\n    width=\"100\"\n    color='grey'\n    ariaLabel='loading'\n  />\n}\n    \nexport default Loader;","// extracted by mini-css-extract-plugin\nexport default {\"movieDetalis\":\"MovieDetailsPage_movieDetalis__JFXgY\",\"genreList\":\"MovieDetailsPage_genreList__OPvFn\"};","import { useEffect, useState } from 'react';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport api from '../../services/api';\nimport Loader from 'components/Loader/Loader';\nimport {FcLeft} from \"react-icons/fc\";\nimport s from './MovieDetailsPage.module.css';\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const location = useLocation();\n  \n  useEffect(() => {\n    const onDetalisMovie = async () => {\n      setLoading(true);\n      try {\n        const detalyMovie = await api.fetchMovieDetalis(movieId);\n        setMovieInfo(detalyMovie);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    onDetalisMovie();\n  }, [movieId]);\n\n  return (\n    <>\n      <Link to={location?.state?.from ?? '/movies'}><button type='button'><FcLeft/> Go back</button></Link>\n       {loading && <Loader />}\n      {movieInfo && (\n        <div className={s.movieDetalis}>\n          <img width=\"300px\"\n            src={'https://image.tmdb.org/t/p/w500' + movieInfo.poster_path}\n            alt={movieInfo.original_title}\n          />\n          <div>\n            <h1>\n              {movieInfo.title} ({movieInfo.release_date.slice(0, 4)})\n            </h1>\n            <p>User score: {movieInfo.popularity}</p>\n            <h2>Overview</h2>\n            <p>{movieInfo.overview}</p>\n            <h2>Genres</h2>\n            <ul className={s.genreList}>\n              {movieInfo.genres.map(genre => (\n                <li key={genre.id}>{genre.name}</li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      )}\n        <hr/>\n      <div>\n        <h3>Additional information</h3>\n        <ul>\n          <li>\n            <Link to=\"cast\">Cast</Link>\n          </li>\n          <li>\n            <Link to=\"reviews\">Reviews</Link>\n          </li>\n        </ul>\n          <hr/>\n        <Outlet />\n      </div>\n    </>\n  );\n};\n\nexport default MovieDetailsPage;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '9af9995e042723d75d96d38fad102c15';\n\n\nconst fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\nconst fetchSearchByKeyword = async (keyword) => {\nconst response = await axios.get(`search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`);\nreturn response.data.results;    \n}\n\nconst fetchMovieDetalis = async (movieId) => {\nconst response = await axios.get(`movie/${movieId}?api_key=${API_KEY}&language=en-US`);\nreturn response.data;     \n}\n\nconst fetchActors = async (movieId) => {\nconst response = await axios.get(`movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`);\nreturn response.data.cast;     \n}\n\nconst fetchReviews = async (movieId) => {\nconst response = await axios.get(`movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\nreturn response.data.results;     \n}\n\nconst api = {\n    fetchTrending,\n    fetchSearchByKeyword,\n    fetchMovieDetalis,\n    fetchActors,\n    fetchReviews,\n};\n\nexport default api;\n\n\n"],"names":["height","width","color","ariaLabel","movieId","useParams","useState","movieInfo","setMovieInfo","loading","setLoading","location","useLocation","useEffect","onDetalisMovie","api","detalyMovie","console","log","to","state","from","type","Loader","className","s","src","poster_path","alt","original_title","title","release_date","slice","popularity","overview","genres","map","genre","name","id","axios","API_KEY","fetchTrending","response","data","results","fetchSearchByKeyword","keyword","fetchMovieDetalis","fetchActors","cast","fetchReviews"],"sourceRoot":""}